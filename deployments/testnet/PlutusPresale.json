{
  "address": "0xB305b529C4b1D9A3181b2a553C60D8d8E496Af17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rateDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_busd",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_openingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_closingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_individualCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevClosingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newClosingTime",
          "type": "uint256"
        }
      ],
      "name": "TimedCrowdsaleExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPrePurchased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VESTING_TIME_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newClosingTime",
          "type": "uint256"
        }
      ],
      "name": "extendTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPercentReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "individualCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "preBuys",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "plusAmountClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rateDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "redeemPlus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retreiveExcessPlus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newIndividualCap",
          "type": "uint256"
        }
      ],
      "name": "setIndividualCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPlusToDistribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "updateCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weiRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x55e7178ffb60d2f4b04d691f9ed0035d8d6fa95df71f20a706f1ebc96c07a419",
  "receipt": {
    "to": null,
    "from": "0xC82cA20867c9E34f2b355933b8BDa2Df673ee401",
    "contractAddress": "0xB305b529C4b1D9A3181b2a553C60D8d8E496Af17",
    "transactionIndex": 0,
    "gasUsed": "1487236",
    "logsBloom": "0x
    "blockHash": "0x17926b08c9c25343eb57887d19d2657bb5ea42d99d14096cceaca0cd749a0cc4",
    "transactionHash": "0x55e7178ffb60d2f4b04d691f9ed0035d8d6fa95df71f20a706f1ebc96c07a419",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18309312,
        "transactionHash": "0x55e7178ffb60d2f4b04d691f9ed0035d8d6fa95df71f20a706f1ebc96c07a419",
        "address": "0xB305b529C4b1D9A3181b2a553C60D8d8E496Af17",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c82ca20867c9e34f2b355933b8bda2df673ee401"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x17926b08c9c25343eb57887d19d2657bb5ea42d99d14096cceaca0cd749a0cc4"
      }
    ],
    "blockNumber": 18309312,
    "cumulativeGasUsed": "1487236",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2,
    10000000000,
    "0xA1D0678e46288803e017d27ccE478Cc34025a099",
    "0x1D7f64e2Fb2Be8c1eac6914f49Ca4E897F5d7539",
    "0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee",
    1649535099,
    1649635199,
    "10000000000000000000",
    "2000000000000000000",
    345600
  ],
  "solcInputHash": "ad29bda1354106a484e525382d595bf2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_busd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_individualCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPrePurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VESTING_TIME_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"extendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preBuys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plusAmountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"redeemPlus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retreiveExcessPlus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndividualCap\",\"type\":\"uint256\"}],\"name\":\"setIndividualCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPlusToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"updateCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"TimedCrowdsaleExtended(uint256,uint256)\":{\"params\":{\"newClosingTime\":\"new closing time\",\"prevClosingTime\":\"old closing time\"}}},\"kind\":\"dev\",\"methods\":{\"buyTokens(uint256,address)\":{\"details\":\"low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.\",\"params\":{\"beneficiary\":\"Recipient of the token purchase\"}},\"capReached()\":{\"details\":\"Checks whether the cap has been reached.\",\"returns\":{\"_0\":\"Whether the cap was reached\"}},\"extendTime(uint256)\":{\"details\":\"Extend crowdsale.\",\"params\":{\"newClosingTime\":\"Crowdsale closing time\"}},\"hasClosed()\":{\"details\":\"Checks whether the period in which the crowdsale is open has already elapsed.\",\"returns\":{\"_0\":\"Whether crowdsale period has elapsed\"}},\"isOpen()\":{\"returns\":{\"_0\":\"true if the crowdsale is open, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"TimedCrowdsaleExtended(uint256,uint256)\":{\"notice\":\"Event for crowdsale extending\"},\"TokensPrePurchased(address,address,uint256,uint256)\":{\"notice\":\"Event for token purchase logging\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/presale/PlutusPresale.sol\":\"PlutusPresale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x45cfc2aa9d85df2add98d4e899d834c646e8ce7001b00ead65f07dbefbcebeef\",\"license\":\"AGPL-3.0\"},\"contracts/presale/Crowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Crowdsale\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\n * allowing investors to purchase tokens with ether. This contract implements\\n * such functionality in its most fundamental form and can be extended to provide additional\\n * functionality and/or custom behavior.\\n * The external interface represents the basic interface for purchasing tokens, and conforms\\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\\n * behavior.\\n */\\nabstract contract Crowdsale is Context, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // The token being sold\\n    IERC20 public token;\\n\\n    // BUSD token address\\n    IERC20 public busd;\\n\\n    // Address where funds are collected\\n    address payable public wallet;\\n\\n    // How many token units a buyer gets per wei.\\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\\n    // 1 wei will give you 1 unit, or 0.001 TOK.\\n    uint256 public rate;\\n\\n    uint256 public rateDecimals;\\n\\n    // Amount of wei raised\\n    uint256 public weiRaised;\\n\\n    /**\\n     * Event for token purchase logging\\n     * @param purchaser who paid for the tokens\\n     * @param beneficiary who got the tokens\\n     * @param value weis paid for purchase\\n     * @param amount amount of tokens purchased\\n     */\\n    event TokensPrePurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\n\\n    /**\\n     * @param _rate Number of token units a buyer gets per wei\\n     * @dev The rate is the conversion between wei and the smallest and indivisible\\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\n     * @param _rateDecimals decimals for the rate\\n     * @param _wallet Address where collected funds will be forwarded to\\n     * @param _token Address of the token being sold\\n     */\\n    constructor(\\n        uint256 _rate,\\n        uint256 _rateDecimals,\\n        address payable _wallet,\\n        IERC20 _token,\\n        IERC20 _busd\\n    ) {\\n        require(_rate > 0, \\\"Crowdsale: rate is 0\\\");\\n        require(_wallet != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\n        require(address(_token) != address(0), \\\"Crowdsale: token is the zero address\\\");\\n        require(address(_busd) != address(0), \\\"Crowdsale: busd is the zero address\\\");\\n\\n        rate = _rate;\\n        rateDecimals = _rateDecimals;\\n        wallet = _wallet;\\n        token = _token;\\n        busd = _busd;\\n    }\\n\\n    /**\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\n     * This function has a non-reentrancy guard, so it shouldn't be called by\\n     * another `nonReentrant` function.\\n     * @param beneficiary Recipient of the token purchase\\n     */\\n    function buyTokens(uint256 _amount, address beneficiary) public nonReentrant {\\n        _preValidatePurchase(beneficiary, _amount);\\n\\n        // calculate token amount to be created\\n        uint256 tokens = _getTokenAmount(_amount);\\n\\n        // update state\\n        weiRaised = weiRaised.add(_amount);\\n\\n        //_processPurchase(beneficiary, tokens);\\n        emit TokensPrePurchased(_msgSender(), beneficiary, _amount, tokens);\\n\\n        _updatePurchasingState(beneficiary, _amount);\\n\\n        _forwardFunds(_amount, beneficiary);\\n        _postValidatePurchase(beneficiary, _amount);\\n    }\\n\\n    /**\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\n     *     require(weiRaised().add(weiAmount) <= cap);\\n     * @param beneficiary Address performing the token purchase\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view virtual {\\n        require(beneficiary != address(0), \\\"Crowdsale: beneficiary is the zero address\\\");\\n        require(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    }\\n\\n    /**\\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\\n     * conditions are not met.\\n     * @param beneficiary Address performing the token purchase\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\\n     * its tokens.\\n     * @param beneficiary Address performing the token purchase\\n     * @param tokenAmount Number of tokens to be emitted\\n     */\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\n        token.safeTransfer(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\\n     * tokens.\\n     * @param beneficiary Address receiving the tokens\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\\n        _deliverTokens(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\\n     * etc.)\\n     * @param beneficiary Address receiving the tokens\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which ether is converted to tokens.\\n     * @param weiAmount Value in wei to be converted into tokens\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\n     */\\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\\n        return weiAmount.mul(rate).div(rateDecimals);\\n    }\\n\\n    /**\\n     * @dev Determines how BUSD is stored/forwarded on purchases.\\n     */\\n    function _forwardFunds(uint256 amount, address beneficiary) internal {\\n        busd.transferFrom(beneficiary, wallet, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf4c2ededfdfb0d8a94cf3fd5f91fe68aa3e99e81eb8d5477f9b0972ee2acc63c\",\"license\":\"AGPL-3.0\"},\"contracts/presale/PlutusPresale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"./Crowdsale.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PlutusPresale is Crowdsale, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Timed Crowdsale\\n    uint256 public openingTime;\\n    uint256 public closingTime;\\n    uint256 public vestingTime;\\n\\n    uint256 public immutable VESTING_TIME_DECIMALS = 10000000;\\n\\n    // Capped presale\\n    uint256 public cap;\\n\\n    // Individually capped\\n    struct PreBuy {\\n        uint256 weiAmount;\\n        uint256 plusAmountClaimed;\\n    }\\n\\n    mapping(address => PreBuy) public preBuys;\\n    uint256 public totalPlusToDistribute;\\n\\n    uint256 public individualCap;\\n\\n    /**\\n     * Event for crowdsale extending\\n     * @param newClosingTime new closing time\\n     * @param prevClosingTime old closing time\\n     */\\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\\n\\n    /**\\n     * @dev Reverts if not in crowdsale time range.\\n     */\\n    modifier onlyWhileOpen() {\\n        require(isOpen(), \\\"TimedCrowdsale: not open\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhileClosed() {\\n        require(hasClosed(), \\\"TimedCrowdsale: not closed\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _rate,\\n        uint256 _rateDecimals,\\n        address payable _wallet,\\n        IERC20 _token,\\n        IERC20 _busd,\\n        uint256 _openingTime,\\n        uint256 _closingTime,\\n        uint256 _cap,\\n        uint256 _individualCap,\\n        uint256 _vestingTime\\n    ) Crowdsale(_rate, _rateDecimals, _wallet, _token, _busd) {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(_openingTime >= block.timestamp, \\\"TimedCrowdsale: opening time is before current time\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(_closingTime > _openingTime, \\\"TimedCrowdsale: opening time is not before closing time\\\");\\n\\n        openingTime = _openingTime;\\n        closingTime = _closingTime;\\n\\n        require(_cap > 0, \\\"CappedCrowdsale: cap is 0\\\");\\n        cap = _cap;\\n\\n        require(_individualCap > 0, \\\"CappedCrowdsale: individual cap is 0\\\");\\n        individualCap = _individualCap;\\n\\n        vestingTime = _vestingTime;\\n    }\\n\\n    /**\\n     * @return true if the crowdsale is open, false otherwise.\\n     */\\n    function isOpen() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp >= openingTime && block.timestamp <= closingTime;\\n    }\\n\\n    /**\\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\n     * @return Whether crowdsale period has elapsed\\n     */\\n    function hasClosed() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > closingTime;\\n    }\\n\\n    /**\\n     * @dev Checks whether the cap has been reached.\\n     * @return Whether the cap was reached\\n     */\\n    function capReached() public view returns (bool) {\\n        return weiRaised >= cap;\\n    }\\n\\n    /**\\n     * @dev Extend crowdsale.\\n     * @param newClosingTime Crowdsale closing time\\n     */\\n    function extendTime(uint256 newClosingTime) external onlyOwner {\\n        require(!hasClosed(), \\\"TimedCrowdsale: already closed\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(newClosingTime > closingTime, \\\"TimedCrowdsale: new closing time is before current closing time\\\");\\n\\n        emit TimedCrowdsaleExtended(closingTime, newClosingTime);\\n        closingTime = newClosingTime;\\n    }\\n\\n    function updateCap(uint256 newCap) external onlyOwner {\\n        require(cap > 0, \\\"CappedCrowdsale: cap is 0\\\");\\n        cap = newCap;\\n    }\\n\\n    function setIndividualCap(uint256 newIndividualCap) external onlyOwner {\\n        require(individualCap > 0, \\\"CappedCrowdsale: individual cap is 0\\\");\\n        individualCap = newIndividualCap;\\n    }\\n\\n    /**\\n     * @dev Extend parent behavior requiring to be within contributing period.\\n     * @param beneficiary Token purchaser\\n     * @param weiAmount Amount of wei contributed\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view override onlyWhileOpen {\\n        super._preValidatePurchase(beneficiary, weiAmount);\\n        require(weiRaised.add(weiAmount) <= cap, \\\"CappedCrowdsale: cap exceeded\\\");\\n        require(\\n            preBuys[beneficiary].weiAmount.add(weiAmount) <= individualCap,\\n            \\\"CappedCrowdsale: beneficiary's cap exceeded\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Extend parent behavior to update beneficiary preBuys.\\n     * @param beneficiary Token purchaser\\n     * @param weiAmount Amount of wei contributed\\n     */\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal override {\\n        super._updatePurchasingState(beneficiary, weiAmount);\\n        preBuys[beneficiary].weiAmount = preBuys[beneficiary].weiAmount.add(weiAmount);\\n        totalPlusToDistribute = totalPlusToDistribute.add(_getTokenAmount(weiAmount));\\n    }\\n\\n    function getPercentReleased() public view returns (uint256) {\\n        // if the presale isn't finish\\n        if (block.timestamp <= closingTime) {\\n            return 0;\\n        } else if (block.timestamp > closingTime.add(vestingTime)) {\\n            // already 100% released\\n            return VESTING_TIME_DECIMALS;\\n        } else {\\n            // not fully released\\n            return block.timestamp.sub(closingTime).mul(VESTING_TIME_DECIMALS).div(vestingTime);\\n        }\\n    }\\n\\n    // allows pre-salers to redeem their plus over time (vestingTime) once the presale is closed\\n    function redeemPlus(address beneficiary) public onlyWhileClosed {\\n        uint256 percentReleased = getPercentReleased();\\n\\n        uint256 totalPlusToClaim = _getTokenAmount(preBuys[beneficiary].weiAmount).mul(percentReleased).div(\\n            VESTING_TIME_DECIMALS\\n        );\\n        uint256 plusToClaim = totalPlusToClaim.sub(preBuys[beneficiary].plusAmountClaimed);\\n        preBuys[beneficiary].plusAmountClaimed = preBuys[beneficiary].plusAmountClaimed.add(plusToClaim);\\n\\n        token.safeTransfer(beneficiary, plusToClaim);\\n    }\\n\\n    // Allows operator wallet to retreive the rgk that won't be distributed\\n    function retreiveExcessPlus() external onlyWhileClosed onlyOwner {\\n        token.safeTransfer(wallet, token.balanceOf(address(this)).sub(totalPlusToDistribute));\\n    }\\n}\\n\",\"keccak256\":\"0x9f8e2166281e6927c8c02120c976cc2607f6abc86e4fc2f0f05838abce82c6af\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a0604052629896806080523480156200001857600080fd5b50604051620019df380380620019df83398181016040526101408110156200003f57600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e088015161010089015161012090990151600160005597989697959694959394929391929091898989898984620000df576040805162461bcd60e51b815260206004820152601460248201527f43726f776473616c653a20726174652069732030000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038316620001265760405162461bcd60e51b8152600401808060200182810382526025815260200180620019ba6025913960400191505060405180910390fd5b6001600160a01b0382166200016d5760405162461bcd60e51b8152600401808060200182810382526024815260200180620019736024913960400191505060405180910390fd5b6001600160a01b038116620001b45760405162461bcd60e51b8152600401808060200182810382526023815260200180620019976023913960400191505060405180910390fd5b600494909455600592909255600380546001600160a01b039283166001600160a01b03199182161790915560018054938316938216939093179092556002805491909316911617905560006200020962000390565b600780546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35042851015620002985760405162461bcd60e51b8152600401808060200182810382526033815260200180620018e56033913960400191505060405180910390fd5b848411620002d85760405162461bcd60e51b8152600401808060200182810382526037815260200180620019186037913960400191505060405180910390fd5b600885905560098490558262000335576040805162461bcd60e51b815260206004820152601960248201527f43617070656443726f776473616c653a20636170206973203000000000000000604482015290519081900360640190fd5b600b83905581620003785760405162461bcd60e51b81526004018080602001828103825260248152602001806200194f6024913960400191505060405180910390fd5b600e91909155600a5550620003949650505050505050565b3390565b608051611527620003be600039806105775280610668528061069752806108e052506115276000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063900306e2116100f9578063c7dab43611610097578063ef10f07711610071578063ef10f07714610372578063f2fde38b1461037a578063fbdd3e59146103a0578063fc0c546a146103a8576101b9565b8063c7dab4361461030e578063cd2b302614610316578063d3d5879914610333576101b9565b8063a7d68896116100d3578063a7d68896146102b5578063b1c5208e146102d2578063b7a8807c146102da578063c625e9b1146102e2576101b9565b8063900306e21461026a5780639cfd81f614610290578063a27aebbc14610298576101b9565b80634042b66f116101665780634f935945116101405780634f93594514610248578063521eb27314610250578063715018a6146102585780638da5cb5b14610262576101b9565b80634042b66f1461023057806347535d7b146102385780634b6753bc14610240576101b9565b80632c4e722e116101975780632c4e722e146101fc578063355274ea146102045780633ca5b2341461020c576101b9565b80630276650b146101be5780631515bc2b146101d85780631a3480b5146101f4575b600080fd5b6101c66103b0565b60408051918252519081900360200190f35b6101e06103b6565b604080519115158252519081900360200190f35b6101c66103bf565b6101c66103c5565b6101c66103cb565b6102146103d1565b604080516001600160a01b039092168252519081900360200190f35b6101c66103e0565b6101e06103e6565b6101c6610401565b6101e0610407565b610214610412565b610260610421565b005b6102146104e2565b6102606004803603602081101561028057600080fd5b50356001600160a01b03166104f1565b6101c661063c565b610260600480360360208110156102ae57600080fd5b50356106d2565b610260600480360360208110156102cb57600080fd5b5035610818565b6101c66108de565b6101c6610902565b610260600480360360408110156102f857600080fd5b50803590602001356001600160a01b0316610908565b6101c6610a0f565b6102606004803603602081101561032c57600080fd5b5035610a15565b6103596004803603602081101561034957600080fd5b50356001600160a01b0316610ac5565b6040805192835260208301919091528051918290030190f35b610260610ade565b6102606004803603602081101561039057600080fd5b50356001600160a01b0316610c46565b6101c6610d5e565b610214610d64565b600e5481565b60095442115b90565b60055481565b60045481565b600b5481565b6002546001600160a01b031681565b60065481565b600060085442101580156103fc57506009544211155b905090565b60095481565b600b54600654101590565b6003546001600160a01b031681565b610429610d73565b6007546001600160a01b0390811691161461048b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6007546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36007805473ffffffffffffffffffffffffffffffffffffffff19169055565b6007546001600160a01b031690565b6104f96103b6565b61054a576040805162461bcd60e51b815260206004820152601a60248201527f54696d656443726f776473616c653a206e6f7420636c6f736564000000000000604482015290519081900360640190fd5b600061055461063c565b6001600160a01b0383166000908152600c6020526040812054919250906105b2907f0000000000000000000000000000000000000000000000000000000000000000906105ac9085906105a690610d77565b90610d9a565b90610dfa565b6001600160a01b0384166000908152600c6020526040812060010154919250906105dd908390610e3c565b6001600160a01b0385166000908152600c60205260409020600101549091506106069082610e7e565b6001600160a01b038086166000908152600c60205260409020600190810192909255905461063691168583610ed8565b50505050565b6000600954421161064f575060006103bc565b600a5460095461065e91610e7e565b42111561068c57507f00000000000000000000000000000000000000000000000000000000000000006103bc565b6106cb600a546105ac7f00000000000000000000000000000000000000000000000000000000000000006105a660095442610e3c90919063ffffffff16565b90506103bc565b6106da610d73565b6007546001600160a01b0390811691161461073c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6107446103b6565b15610796576040805162461bcd60e51b815260206004820152601e60248201527f54696d656443726f776473616c653a20616c726561647920636c6f7365640000604482015290519081900360640190fd5b60095481116107d65760405162461bcd60e51b815260040180806020018281038252603f815260200180611466603f913960400191505060405180910390fd5b600954604080519182526020820183905280517f46711e222f558a07afd26e5e71b48ecb0a8b2cdcd40faeb1323e05e2c76a2f329281900390910190a1600955565b610820610d73565b6007546001600160a01b03908116911614610882576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000600b54116108d9576040805162461bcd60e51b815260206004820152601960248201527f43617070656443726f776473616c653a20636170206973203000000000000000604482015290519081900360640190fd5b600b55565b7f000000000000000000000000000000000000000000000000000000000000000081565b60085481565b60026000541415610960576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005561096f8183611057565b600061097a83610d77565b60065490915061098a9084610e7e565b6006556001600160a01b03821661099f610d73565b6001600160a01b03167fee94cf487bcb42e0583204667c51e90589b377a6ed0b7d7f08a88c824cdadc8d8584604051808381526020018281526020019250505060405180910390a36109f18284611184565b6109fb83836111e6565b610a058284611180565b5050600160005550565b600a5481565b610a1d610d73565b6007546001600160a01b03908116911614610a7f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000600e5411610ac05760405162461bcd60e51b81526004018080602001828103825260248152602001806114426024913960400191505060405180910390fd5b600e55565b600c602052600090815260409020805460019091015482565b610ae66103b6565b610b37576040805162461bcd60e51b815260206004820152601a60248201527f54696d656443726f776473616c653a206e6f7420636c6f736564000000000000604482015290519081900360640190fd5b610b3f610d73565b6007546001600160a01b03908116911614610ba1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600354600d54600154604080516370a0823160e01b81523060048201529051610c44946001600160a01b0390811694610c319490939116916370a0823191602480820192602092909190829003018186803b158015610bff57600080fd5b505afa158015610c13573d6000803e3d6000fd5b505050506040513d6020811015610c2957600080fd5b505190610e3c565b6001546001600160a01b03169190610ed8565b565b610c4e610d73565b6007546001600160a01b03908116911614610cb0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610cf55760405162461bcd60e51b815260040180806020018281038252602681526020018061141c6026913960400191505060405180910390fd5b6007546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600d5481565b6001546001600160a01b031681565b3390565b6000610d946005546105ac60045485610d9a90919063ffffffff16565b92915050565b600082610da957506000610d94565b82820282848281610db657fe5b0414610df35760405162461bcd60e51b81526004018080602001828103825260218152602001806114a56021913960400191505060405180910390fd5b9392505050565b6000610df383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611271565b6000610df383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061132a565b600082820183811015610df3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310610f6a5780518252601f199092019160209182019101610f4b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610fcc576040519150601f19603f3d011682016040523d82523d6000602084013e610fd1565b606091505b5091509150818015610fff575080511580610fff5750808060200190516020811015610ffc57600080fd5b50515b611050576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b61105f6103e6565b6110b0576040805162461bcd60e51b815260206004820152601860248201527f54696d656443726f776473616c653a206e6f74206f70656e0000000000000000604482015290519081900360640190fd5b6110ba8282611384565b600b546006546110ca9083610e7e565b111561111d576040805162461bcd60e51b815260206004820152601d60248201527f43617070656443726f776473616c653a20636170206578636565646564000000604482015290519081900360640190fd5b600e546001600160a01b0383166000908152600c60205260409020546111439083610e7e565b11156111805760405162461bcd60e51b815260040180806020018281038252602b8152602001806114c6602b913960400191505060405180910390fd5b5050565b61118e8282611180565b6001600160a01b0382166000908152600c60205260409020546111b19082610e7e565b6001600160a01b0383166000908152600c60205260409020556111df6111d682610d77565b600d5490610e7e565b600d555050565b600254600354604080516323b872dd60e01b81526001600160a01b038581166004830152928316602482015260448101869052905191909216916323b872dd9160648083019260209291908290030181600087803b15801561124757600080fd5b505af115801561125b573d6000803e3d6000fd5b505050506040513d602081101561063657600080fd5b600081836112fd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112c25781810151838201526020016112aa565b50505050905090810190601f1680156112ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161130957fe5b04905083858161131557fe5b0681850201851461132257fe5b949350505050565b6000818484111561137c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156112c25781810151838201526020016112aa565b505050900390565b6001600160a01b0382166113c95760405162461bcd60e51b815260040180806020018281038252602a8152602001806114f1602a913960400191505060405180910390fd5b80611180576040805162461bcd60e51b815260206004820152601960248201527f43726f776473616c653a20776569416d6f756e74206973203000000000000000604482015290519081900360640190fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737343617070656443726f776473616c653a20696e646976696475616c20636170206973203054696d656443726f776473616c653a206e657720636c6f73696e672074696d65206973206265666f72652063757272656e7420636c6f73696e672074696d65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743617070656443726f776473616c653a2062656e656669636961727927732063617020657863656564656443726f776473616c653a2062656e656669636961727920697320746865207a65726f2061646472657373a164736f6c6343000705000a54696d656443726f776473616c653a206f70656e696e672074696d65206973206265666f72652063757272656e742074696d6554696d656443726f776473616c653a206f70656e696e672074696d65206973206e6f74206265666f726520636c6f73696e672074696d6543617070656443726f776473616c653a20696e646976696475616c20636170206973203043726f776473616c653a20746f6b656e20697320746865207a65726f206164647265737343726f776473616c653a206275736420697320746865207a65726f206164647265737343726f776473616c653a2077616c6c657420697320746865207a65726f2061646472657373",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "TimedCrowdsaleExtended(uint256,uint256)": {
        "params": {
          "newClosingTime": "new closing time",
          "prevClosingTime": "old closing time"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "buyTokens(uint256,address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
        "params": {
          "beneficiary": "Recipient of the token purchase"
        }
      },
      "capReached()": {
        "details": "Checks whether the cap has been reached.",
        "returns": {
          "_0": "Whether the cap was reached"
        }
      },
      "extendTime(uint256)": {
        "details": "Extend crowdsale.",
        "params": {
          "newClosingTime": "Crowdsale closing time"
        }
      },
      "hasClosed()": {
        "details": "Checks whether the period in which the crowdsale is open has already elapsed.",
        "returns": {
          "_0": "Whether crowdsale period has elapsed"
        }
      },
      "isOpen()": {
        "returns": {
          "_0": "true if the crowdsale is open, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TimedCrowdsaleExtended(uint256,uint256)": {
        "notice": "Event for crowdsale extending"
      },
      "TokensPrePurchased(address,address,uint256,uint256)": {
        "notice": "Event for token purchase logging"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 142,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9396,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)6951"
      },
      {
        "astId": 9398,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "busd",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)6951"
      },
      {
        "astId": 9400,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "wallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 9402,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "rate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9404,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "rateDecimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9406,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "weiRaised",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 30,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9674,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "openingTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9676,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "closingTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 9678,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "vestingTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 9683,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "cap",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 9692,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "preBuys",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(PreBuy)9688_storage)"
      },
      {
        "astId": 9694,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "totalPlusToDistribute",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 9696,
        "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
        "label": "individualCap",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)6951": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(PreBuy)9688_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PlutusPresale.PreBuy)",
        "numberOfBytes": "32",
        "value": "t_struct(PreBuy)9688_storage"
      },
      "t_struct(PreBuy)9688_storage": {
        "encoding": "inplace",
        "label": "struct PlutusPresale.PreBuy",
        "members": [
          {
            "astId": 9685,
            "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
            "label": "weiAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9687,
            "contract": "contracts/presale/PlutusPresale.sol:PlutusPresale",
            "label": "plusAmountClaimed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}